//
// Created by Nathan Bollom on 15/1/20.
//

#include "material.h"

#include <utility>

Material::Material() {
    // TODO: create new material in db and populate id from autogenerated pk
}

Material::Material(uint32_t id, std::string name, std::string description) : _id(id), _name(std::move(name)), _description(std::move(description)) {

}

uint32_t Material::ID() {
    return _id;
}

std::string Material::Name() {
    return _name;
}

std::string Material::Description() {
    return _description;
}

void Material::setName(std::string name) {
    _name = std::move(name);
}

void Material::setDescription(std::string description) {
    _description = std::move(description);
}

void Material::Save(Database *db) {
    if (db == nullptr) {
        db = Database::Shared();
    }
    CheckAndUpdateDBTable(db);
    // TODO: save changes to the db
}

Material * Material::Load(uint32_t id, Database *db) {
    if (db == nullptr) {
        db = Database::Shared();
    }
    CheckAndUpdateDBTable(db);
    // TODO: load from db and return
    return nullptr;
}

#define CURRENT_VERSION 1

void Material::CheckAndUpdateDBTable(Database *db) {
    // TODO: check registry to see if table exists/latest version
    int db_version = db->GetTypeVersion("Material");
    bool updated = false;
    if (db_version < 1) {
        db->ExecStatement("\
CREATE TABLE IF NOT EXISTS Material ( \
ID INTEGER PRIMARY KEY AUTOINCREMENT, \
Name TEXT, \
Description TEXT \
);");
        updated = true;
    }

    if (updated) {
        db->UpdateTypeVersion("Material", CURRENT_VERSION);
    }
}
